# -*- coding: utf-8 -*-
"""Voice_Call.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XSMmzJzrrKYnQ-5ispmmhV_pRial4ekd
"""

print('hi_loll')

"""**Product Analyst Assignment: Voice Call Data Analysis**

This case study is designed to evaluate your ability to analyze data, derive actionable
insights, and provide recommendations to improve product performance.


**Objective**

Evaluate voice call performance and feedback data to identify key trends, assess
product efficacy, and propose improvements.


The Column names are self-explanatory and should you have any doubts, respond to
the email.

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

# File path (from your earlier upload)
file_path = "/content/voice data.xlsx"

# Load sheets
xls = pd.ExcelFile(file_path)
calls = pd.read_excel(xls, sheet_name="Call data")
predef = pd.read_excel(xls, sheet_name="call feedback")
other = pd.read_excel(xls, sheet_name="other feedback")

# Standardize columns
calls = calls.rename(
    columns={
        "Call Id": "call_id",
        "Voice AI Agent Id": "agent_id",
        "Business Id": "business_id",
        "callStatus": "status",
        "Call Duration (Mins)": "duration_mins",
    }
)
calls["status"] = calls["status"].astype(str).str.strip().str.lower()
calls["duration_mins"] = pd.to_numeric(calls["duration_mins"], errors="coerce")

predef = predef.rename(columns={"Predefined Feedbacks": "feedback", "Count": "count"})
other = other.rename(columns={"Feedbacks in Other": "feedback", "Count": "count"})
predef["count"] = pd.to_numeric(predef["count"], errors="coerce").fillna(0).astype(int)
other["count"] = pd.to_numeric(other["count"], errors="coerce").fillna(0).astype(int)

# ---- Core statistics ----
dur = calls["duration_mins"].dropna()
total_calls = len(calls)
completed_calls = int((calls["status"] == "completed").sum())
completion_rate = (completed_calls / total_calls * 100) if total_calls else 0.0

summary = {
    "Total Calls": total_calls,
    "Completed Calls": completed_calls,
    "Completion Rate (%)": round(completion_rate, 2),
    "Mean Duration (mins)": round(dur.mean(), 4) if len(dur) else np.nan,
    "Median Duration (mins)": round(dur.median(), 4) if len(dur) else np.nan,
    "Std Dev Duration (mins)": round(dur.std(), 4) if len(dur) else np.nan,
    "Min Duration (mins)": round(dur.min(), 4) if len(dur) else np.nan,
    "25th Percentile (mins)": round(np.percentile(dur, 25), 4) if len(dur) else np.nan,
    "50th Percentile (mins)": round(np.percentile(dur, 50), 4) if len(dur) else np.nan,
    "75th Percentile (mins)": round(np.percentile(dur, 75), 4) if len(dur) else np.nan,
    "95th Percentile (mins)": round(np.percentile(dur, 95), 4) if len(dur) else np.nan,
    "Max Duration (mins)": round(dur.max(), 4) if len(dur) else np.nan,
}

summary_df = pd.DataFrame([summary])

# Threshold-based insights
calls["is_short_18s"] = calls["duration_mins"] < 0.3   # 18 seconds
calls["is_short_6s"] = calls["duration_mins"] < 0.1    # 6 seconds
calls["is_long_5m"] = calls["duration_mins"] > 5.0
calls["is_long_10m"] = calls["duration_mins"] > 10.0

short_18s_share = calls["is_short_18s"].mean() * 100 if total_calls else 0.0
short_6s_share = calls["is_short_6s"].mean() * 100 if total_calls else 0.0
long_5m_share = calls["is_long_5m"].mean() * 100 if total_calls else 0.0
long_10m_share = calls["is_long_10m"].mean() * 100 if total_calls else 0.0

thresholds_df = pd.DataFrame([{
    "Share < 6 sec (%)": round(short_6s_share, 2),
    "Share < 18 sec (%)": round(short_18s_share, 2),
    "Share > 5 min (%)": round(long_5m_share, 2),
    "Share > 10 min (%)": round(long_10m_share, 2),
}])

import pandas as pd, numpy as np, matplotlib.pyplot as plt
FILE_PATH = "/content/voice data.xlsx"

xls = pd.ExcelFile(FILE_PATH)
calls = pd.read_excel(xls, "Call data").rename(columns={
    "Call Id":"call_id","Voice AI Agent Id":"agent_id",
    "Business Id":"business_id","callStatus":"status",
    "Call Duration (Mins)":"duration_mins"
})
predef = pd.read_excel(xls, "call feedback").rename(columns={"Predefined Feedbacks":"feedback","Count":"count"})
other  = pd.read_excel(xls, "other feedback").rename(columns={"Feedbacks in Other":"feedback","Count":"count"})

calls["status"] = calls["status"].astype(str).str.lower().str.strip()
calls["duration_mins"] = pd.to_numeric(calls["duration_mins"], errors="coerce")

# Summary
dur = calls["duration_mins"].dropna()
summary = {
    "total_calls": len(calls),
    "completed_calls": int((calls["status"]=="completed").sum()),
    "completion_rate_%": round((calls["status"]=="completed").mean()*100,2),
    "mean": round(dur.mean(),4), "median": round(dur.median(),4),
    "p25": np.percentile(dur,25), "p75": np.percentile(dur,75),
    "p95": np.percentile(dur,95), "min": dur.min(), "max": dur.max(),
    "missing_duration_%": round(100*(1-len(dur)/len(calls)),2)
}
print(summary)

# Thresholds
calls["short_6s"]  = calls["duration_mins"] < 0.1
calls["short_18s"] = calls["duration_mins"] < 0.3
calls["long_5m"]   = calls["duration_mins"] > 5
calls["long_10m"]  = calls["duration_mins"] > 10
print(calls[["short_6s","short_18s","long_5m","long_10m"]].mean().mul(100).round(2))

# Agent scorecard
agent = (calls.assign(done=calls["status"].eq("completed"))
         .groupby("agent_id", as_index=False)
         .agg(total=("call_id","count"),
              completed=("done","sum"),
              avg_dur=("duration_mins","mean"),
              med_dur=("duration_mins","median"),
              short_18s=("short_18s","mean"),
              long_5m=("long_5m","mean"))
        )
agent["completion_%"] = (agent["completed"]/agent["total"]*100).round(2)
agent["short_18s_%"]  = (agent["short_18s"]*100).round(2)
agent["long_5m_%"]    = (agent["long_5m"]*100).round(2)
agent = agent.sort_values("total", ascending=False)
agent.to_csv("agent_performance.csv", index=False)

# Business scorecard
biz = (calls.assign(done=calls["status"].eq("completed"))
       .groupby("business_id", as_index=False)
       .agg(total=("call_id","count"),
            completed=("done","sum"),
            avg_dur=("duration_mins","mean"),
            med_dur=("duration_mins","median"),
            short_18s=("short_18s","mean"),
            long_5m=("long_5m","mean"))
      )
biz["completion_%"] = (biz["completed"]/biz["total"]*100).round(2)
biz["short_18s_%"]  = (biz["short_18s"]*100).round(2)
biz["long_5m_%"]    = (biz["long_5m"]*100).round(2)
biz = biz.sort_values("total", ascending=False)
biz.to_csv("business_performance.csv", index=False)

# Charts (matplotlib, single-plot, default colors)
calls["status"].value_counts().plot(kind="bar"); plt.title("Calls by Status"); plt.xlabel("Status"); plt.ylabel("Count"); plt.tight_layout(); plt.show()
dur.plot(kind="hist", bins=50); plt.title("Distribution of Call Durations (mins)"); plt.xlabel("Duration (mins)"); plt.ylabel("Frequency"); plt.tight_layout(); plt.show()

top_agents = agent.head(15)
plt.barh(top_agents["agent_id"].astype(str), top_agents["completion_%"]); plt.title("Completion Rate by Agent (Top 15)"); plt.xlabel("Completion (%)"); plt.tight_layout(); plt.show()
plt.barh(top_agents["agent_id"].astype(str), top_agents["med_dur"]); plt.title("Median Duration by Agent (Top 15)"); plt.xlabel("Median Duration (mins)"); plt.tight_layout(); plt.show()

predef.sort_values("count", ascending=False).head(15).plot(x="feedback", y="count", kind="barh")
plt.title("Top Predefined Feedback"); plt.xlabel("Count"); plt.tight_layout(); plt.show()

import os
import io
import zipfile
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path

from IPython.display import display

data_dir = Path("/content/")
# Find file
candidates = [p for p in data_dir.glob("*.xlsx") if "voice" in p.name.lower()]
if not candidates:
    candidates = list(data_dir.glob("*.xlsx"))
if not candidates:
    raise FileNotFoundError("No Excel files found in /content/. Please re-upload the dataset.")

file_path = None
for c in candidates:
    if c.name.lower() == "voice data.xlsx":
        file_path = c
        break
if file_path is None:
    file_path = candidates[0]

xls = pd.ExcelFile(file_path)
sheet_map = {s.lower(): s for s in xls.sheet_names}
call_sheet = sheet_map.get("call data") or "Call data"
predef_sheet = sheet_map.get("call feedback") or "call feedback"
other_sheet = sheet_map.get("other feedback") or "other feedback"

calls = pd.read_excel(xls, sheet_name=call_sheet)
predef = pd.read_excel(xls, sheet_name=predef_sheet)
other  = pd.read_excel(xls, sheet_name=other_sheet)

calls = calls.rename(columns={
    "Call Id":"call_id",
    "Voice AI Agent Id":"agent_id",
    "Business Id":"business_id",
    "callStatus":"status",
    "Call Duration (Mins)":"duration_mins",
})
calls["status"] = calls["status"].astype(str).str.strip().str.lower()
calls["duration_mins"] = pd.to_numeric(calls["duration_mins"], errors="coerce")

predef = predef.rename(columns={"Predefined Feedbacks":"feedback","Count":"count"})
other  = other.rename(columns={"Feedbacks in Other":"feedback","Count":"count"})
predef["count"] = pd.to_numeric(predef["count"], errors="coerce").fillna(0).astype(int)
other["count"]  = pd.to_numeric(other["count"], errors="coerce").fillna(0).astype(int)

# Summaries
dur = calls["duration_mins"].dropna()
total_calls = len(calls)
completed_calls = int((calls["status"]=="completed").sum())
completion_rate = round((completed_calls/total_calls*100),2) if total_calls else 0.0

summary = pd.DataFrame([{
    "Excel File": file_path.name,
    "Total Calls": total_calls,
    "Completed Calls": completed_calls,
    "Completion Rate (%)": completion_rate,
    "Mean Duration (mins)": round(dur.mean(),4) if len(dur) else np.nan,
    "Median Duration (mins)": round(dur.median(),4) if len(dur) else np.nan,
    "P25 (mins)": round(np.percentile(dur,25),4) if len(dur) else np.nan,
    "P75 (mins)": round(np.percentile(dur,75),4) if len(dur) else np.nan,
    "P95 (mins)": round(np.percentile(dur,95),4) if len(dur) else np.nan,
    "Min Duration (mins)": round(dur.min(),4) if len(dur) else np.nan,
    "Max Duration (mins)": round(dur.max(),4) if len(dur) else np.nan,
    "Missing Duration (%)": round(100*(1-len(dur)/len(calls)),2) if total_calls else np.nan,
}])

print("Overall Summary")
display(summary)

calls["short_6s"]  = calls["duration_mins"] < 0.10
calls["short_18s"] = calls["duration_mins"] < 0.30
calls["long_5m"]   = calls["duration_mins"] > 5.0
calls["long_10m"]  = calls["duration_mins"] > 10.0

thresholds = pd.DataFrame([{
    "Share < 6 sec (%)": round(calls["short_6s"].mean()*100, 2),
    "Share < 18 sec (%)": round(calls["short_18s"].mean()*100, 2),
    "Share > 5 min (%)": round(calls["long_5m"].mean()*100, 2),
    "Share > 10 min (%)": round(calls["long_10m"].mean()*100, 2),
}])

print("Short/Long Call Shares")
display(thresholds)

agent_perf = (
    calls.assign(is_completed=calls["status"].eq("completed").astype(int))
    .groupby("agent_id", as_index=False)
    .agg(
        total_calls=("call_id","count"),
        completed=("is_completed","sum"),
        avg_duration=("duration_mins","mean"),
        median_duration=("duration_mins","median"),
        short_18s=("short_18s","mean"),
        long_5m=("long_5m","mean"),
    )
)
agent_perf["completion_rate_%"] = (agent_perf["completed"]/agent_perf["total_calls"]*100).round(2)
agent_perf["avg_duration"] = agent_perf["avg_duration"].round(4)
agent_perf["median_duration"] = agent_perf["median_duration"].round(4)
agent_perf["short_18s_%"] = (agent_perf["short_18s"]*100).round(2)
agent_perf["long_5m_%"] = (agent_perf["long_5m"]*100).round(2)
print("Agent Performance")
display(agent_perf.sort_values("total_calls", ascending=False))
business_perf = (
    calls.assign(is_completed=calls["status"].eq("completed").astype(int))
    .groupby("business_id", as_index=False)
    .agg(
        total_calls=("call_id","count"),
        completed=("is_completed","sum"),
        avg_duration=("duration_mins","mean"),
        median_duration=("duration_mins","median"),
        short_18s=("short_18s","mean"),
        long_5m=("long_5m","mean"),
    )
)
business_perf["completion_rate_%"] = (business_perf["completed"]/business_perf["total_calls"]*100).round(2)
business_perf["avg_duration"] = business_perf["avg_duration"].round(4)
business_perf["median_duration"] = business_perf["median_duration"].round(4)
business_perf["short_18s_%"] = (business_perf["short_18s"]*100).round(2)
business_perf["long_5m_%"] = (business_perf["long_5m"]*100).round(2)

print("Business Performance")
display(business_perf.sort_values("total_calls", ascending=False))

plots_dir = data_dir / "voice_plots"
plots_dir.mkdir(exist_ok=True)
saved_images = []

def save_current_fig(name: str):
    out = plots_dir / f"{name}.png"
    plt.tight_layout()
    plt.savefig(out, dpi=160, bbox_inches="tight")
    plt.show()
    return out

# 1) Calls by Status
plt.figure()
calls["status"].value_counts().sort_values(ascending=False).plot(kind="bar")
plt.title("Calls by Status")
plt.xlabel("Status")
plt.ylabel("Count")
saved_images.append(save_current_fig("01_calls_by_status"))

# 2) Duration distribution
plt.figure()
dur.plot(kind="hist", bins=50)
plt.title("Distribution of Call Durations (mins)")
plt.xlabel("Duration (mins)")
plt.ylabel("Frequency")
saved_images.append(save_current_fig("02_duration_histogram"))

# 3) Boxplot duration
plt.figure()
plt.boxplot(dur.dropna(), vert=True, labels=["Duration (mins)"])
plt.title("Overall Call Duration — Boxplot")
plt.ylabel("Duration (mins)")
saved_images.append(save_current_fig("03_duration_boxplot"))

# 4) Top 15 agents by volume
top_agents = agent_perf.sort_values("total_calls", ascending=False).head(15)
plt.figure()
plt.barh(top_agents["agent_id"].astype(str), top_agents["total_calls"])
plt.title("Top 15 Agents by Call Volume")
plt.xlabel("Calls")
plt.ylabel("Agent")
saved_images.append(save_current_fig("04_top15_agents_volume"))

# 5) Completion rate by top 15 agents
plt.figure()
plt.barh(top_agents["agent_id"].astype(str), top_agents["completion_rate_%"])
plt.title("Completion Rate by Agent (Top 15 by Volume)")
plt.xlabel("Completion Rate (%)")
plt.ylabel("Agent")
saved_images.append(save_current_fig("05_top15_agents_completion_rate"))

# 6) Median duration by top 15 agents
plt.figure()
plt.barh(top_agents["agent_id"].astype(str), top_agents["median_duration"])
plt.title("Median Duration by Agent (Top 15 by Volume)")
plt.xlabel("Median Duration (mins)")
plt.ylabel("Agent")
saved_images.append(save_current_fig("06_top15_agents_median_duration"))

# 7) Predefined feedback top 15
predef_sorted = predef.sort_values("count", ascending=False).head(15)
plt.figure()
plt.barh(predef_sorted["feedback"].astype(str), predef_sorted["count"])
plt.title("Top Predefined Feedback Issues (Top 15)")
plt.xlabel("Count")
plt.ylabel("Feedback")
saved_images.append(save_current_fig("07_top_predefined_feedbacks"))

zip_path = data_dir / "voice_dashboard_plots.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
    for img in saved_images:
        zf.write(img, arcname=img.name)

agent_csv = data_dir / "agent_performance.csv"
business_csv = data_dir / "business_performance.csv"
summary_csv = data_dir / "overall_summary.csv"
thresholds_csv = data_dir / "thresholds_summary.csv"

agent_perf.to_csv(agent_csv, index=False)
business_perf.to_csv(business_csv, index=False)
summary.to_csv(summary_csv, index=False)
thresholds.to_csv(thresholds_csv, index=False)

{
    "excel_file_used": str(file_path),
    "plots_folder": str(plots_dir),
    "zip_download": str(zip_path),
    "csv_agent": str(agent_csv),
    "csv_business": str(business_csv),
    "csv_summary": str(summary_csv),
    "csv_thresholds": str(thresholds_csv),
}